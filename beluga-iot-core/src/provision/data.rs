use std::collections::HashMap;
use std::fmt::{Debug, Display};

use serde::{Deserialize, Serialize};

/// Represents information about a device certificate, including the ownership
/// token, certificate ID, certificate, and private key.
#[derive(Debug, Clone)]
pub struct DeviceCertificateInfo {
    /// The ownership token associated with the certificate.
    pub ownership_token: String,
    /// The unique identifier for the certificate.
    pub certificate_id: String,
    /// The **PEM-encoded** certificate.
    pub certificate: String,
    /// The **PEM-encoded** private key associated with the certificate.
    ///
    /// This field contains the private key in **PEM** format if the certificate
    /// was generated by the `AWS`. If a **Certificate Signing Request
    /// (CSR)** was used to create the certificate, this field will be an
    /// empty string, as the private key is not provided by `AWS`.
    pub key: String,
}

impl From<CreateKeysAndCertificateResp> for DeviceCertificateInfo {
    fn from(value: CreateKeysAndCertificateResp) -> Self {
        Self {
            ownership_token: value.ownership_token,
            certificate_id: value.id,
            certificate: value.certificate,
            key: value.key,
        }
    }
}

impl From<CreateCertificateFromCsrResp> for DeviceCertificateInfo {
    fn from(value: CreateCertificateFromCsrResp) -> Self {
        Self {
            ownership_token: value.ownership_token,
            certificate_id: value.id,
            certificate: value.certificate,
            key: String::new(),
        }
    }
}

/// A request to create a certificate from a **Certificate Signing Request
/// (CSR)**.
///
/// This struct represents the request payload for the operation to create a
/// certificate from a provided **CSR**. The `csr` field contains the **CSR**
/// string that will be used to generate the certificate.
#[derive(Debug, Deserialize, Serialize, Clone)]
pub(super) struct CreateCertificateFromCsrReq {
    /// The **Certificate Signing Request (CSR)** string that will be used to
    /// generate the certificate.
    #[serde(rename = "certificateSigningRequest")]
    pub(super) csr: String,
}

/// A response containing the details of a newly created certificate.
///
/// This struct represents the response payload for the operation to create a
/// certificate from a provided **CSR**. The fields in this struct contain the
/// ownership token, certificate ID, and the PEM-encoded certificate that was
/// generated.
#[derive(Debug, Deserialize, Serialize, Clone)]
pub(super) struct CreateCertificateFromCsrResp {
    #[serde(rename = "certificateOwnershipToken")]
    pub(super) ownership_token: String,
    #[serde(rename = "certificateId")]
    pub(super) id: String,
    #[serde(rename = "certificatePem")]
    pub(super) certificate: String,
}

/// A response containing the details of a newly created certificate and private
/// key.
#[derive(Debug, Deserialize, Serialize, Clone)]
pub(super) struct CreateKeysAndCertificateResp {
    /// The certificate ownership token associated with the certificate.
    ///
    /// This field represents the ownership token for the certificate that was
    /// generated. The ownership token is used to identify the entity that
    /// owns the certificate.
    #[serde(rename = "certificateOwnershipToken")]
    pub(super) ownership_token: String,
    #[serde(rename = "certificateId")]
    pub(super) id: String,
    /// The **PEM-encoded** certificate that was generated.
    #[serde(rename = "certificatePem")]
    pub(super) certificate: String,
    /// The private key associated with the certificate.
    ///
    /// This field contains the **PEM-encoded** private key that was generated
    /// along with the certificate.
    #[serde(rename = "privateKey")]
    pub(super) key: String,
}

/// This struct represents the request payload for the operation to register a
/// new IoT device. The `ownership_token` field contains the certificate
/// ownership token that will be used to associate the device with the
/// certificate. The `parameters` field contains a map of additional parameters
/// that will be used to configure the device.
#[derive(Debug, Deserialize, Serialize, Clone)]
pub(super) struct RegisterThingReq {
    #[serde(rename = "certificateOwnershipToken")]
    pub(super) ownership_token: String,
    pub(super) parameters: HashMap<String, String>,
}

/// This struct represents the response payload for the operation to register a
/// new IoT device. The `thing_name` field contains the name of the registered
/// device, and the `configuration` field contains a map of additional
/// configuration parameters that were set for the device.
#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct RegisterThingResponse {
    /// The name of the registered IoT device.
    #[serde(rename = "thingName")]
    pub thing_name: String,
    /// The configuration parameters for the registered IoT device.
    #[serde(rename = "deviceConfiguration")]
    pub configuration: HashMap<String, String>,
}

/// An error that occurred during the provisioning process.
#[derive(Debug, Deserialize, Serialize, Clone, thiserror::Error)]
pub struct ProvisionError {
    /// The status code associated with the provisioning error.
    #[serde(rename = "statusCode")]
    pub status: i32,
    /// The error code associated with the provisioning error.
    #[serde(rename = "errorCode")]
    pub code: String,
    /// The error message associated with the provisioning error.
    ///
    /// This field contains a string that provides more details about the error
    /// that occurred during the provisioning process.
    #[serde(rename = "errorMessage")]
    pub message: String,
}

impl Display for ProvisionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "Provisioning Error - Status: \"{}\", Code: \"{}\", Details: \"{}\"",
            self.status, self.code, self.message
        )
    }
}
