/* automatically generated by rust-bindgen 0.69.1 */

pub type aws_compression_error = ::core::ffi::c_uint;
#[doc = " Function used to encode a single symbol to an aws_huffman_code\n\n \\param[in] symbol    The symbol to encode\n \\param[in] userdata  Optional userdata (aws_huffman_symbol_coder.userdata)\n\n \\returns The code representing the symbol. If this symbol is not recognized,\n return a code with num_bits set to 0."]
pub type aws_huffman_symbol_encoder_fn = ::core::option::Option<
    unsafe extern "C" fn(symbol: u8, userdata: *mut ::core::ffi::c_void) -> aws_huffman_code,
>;
#[doc = " Function used to decode a code into a symbol\n\n \\param[in]   bits        The bits to attept to decode a symbol from\n \\param[out]  symbol      The symbol found. Do not write to if no valid symbol\n found \\param[in]   userdata    Optional userdata\n (aws_huffman_symbol_coder.userdata)\n\n \\returns The number of bits read from bits"]
pub type aws_huffman_symbol_decoder_fn = ::core::option::Option<
    unsafe extern "C" fn(bits: u32, symbol: *mut u8, userdata: *mut ::core::ffi::c_void) -> u8,
>;
#[doc = " Represents an encoded code"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_huffman_code {
    #[doc = " The value of the code\n \\note The pattern is stored in the least significant bits"]
    pub pattern: u32,
    #[doc = " The number of bits in pattern to use"]
    pub num_bits: u8,
}
#[doc = " Structure used to define how symbols are encoded and decoded"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_huffman_symbol_coder {
    pub encode: aws_huffman_symbol_encoder_fn,
    pub decode: aws_huffman_symbol_decoder_fn,
    pub userdata: *mut ::core::ffi::c_void,
}
#[doc = " Structure used for persistent encoding.\n Allows for reading from or writing to incomplete buffers."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_huffman_encoder {
    pub coder: *mut aws_huffman_symbol_coder,
    pub eos_padding: u8,
    pub overflow_bits: aws_huffman_code,
}
#[doc = " Structure used for persistent decoding.\n Allows for reading from or writing to incomplete buffers."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aws_huffman_decoder {
    pub coder: *mut aws_huffman_symbol_coder,
    pub allow_growth: bool,
    pub working_bits: u64,
    pub num_bits: u8,
}
pub const AWS_C_COMPRESSION_PACKAGE_ID: u32 = 3;
pub const AWS_ERROR_COMPRESSION_UNKNOWN_SYMBOL: aws_compression_error = 3072;
pub const AWS_ERROR_END_COMPRESSION_RANGE: aws_compression_error = 4095;
extern "C" {
    #[doc = " Initializes internal datastructures used by aws-c-compression.\n Must be called before using any functionality in aws-c-compression."]
    pub fn aws_compression_library_init(alloc: *mut aws_allocator);
    #[doc = " Clean up internal datastructures used by aws-c-compression.\n Must not be called until application is done using functionality in aws-c-compression."]
    pub fn aws_compression_library_clean_up();
    #[doc = " Initialize a encoder object with a symbol coder."]
    pub fn aws_huffman_encoder_init(
        encoder: *mut aws_huffman_encoder,
        coder: *mut aws_huffman_symbol_coder,
    );
    #[doc = " Resets a decoder for use with a new binary stream"]
    pub fn aws_huffman_encoder_reset(encoder: *mut aws_huffman_encoder);
    #[doc = " Initialize a decoder object with a symbol coder."]
    pub fn aws_huffman_decoder_init(
        decoder: *mut aws_huffman_decoder,
        coder: *mut aws_huffman_symbol_coder,
    );
    #[doc = " Resets a decoder for use with a new binary stream"]
    pub fn aws_huffman_decoder_reset(decoder: *mut aws_huffman_decoder);
    #[doc = " Get the byte length of to_encode post-encoding.\n\n \\param[in]       encoder         The encoder object to use\n \\param[in]       to_encode       The symbol buffer to encode\n\n \\return The length of the encoded string."]
    pub fn aws_huffman_get_encoded_length(
        encoder: *mut aws_huffman_encoder,
        to_encode: aws_byte_cursor,
    ) -> usize;
    #[doc = " Encode a symbol buffer into the output buffer.\n\n \\param[in]       encoder         The encoder object to use\n \\param[in]       to_encode       The symbol buffer to encode\n \\param[in]       output          The buffer to write encoded bytes to\n\n \\return AWS_OP_SUCCESS if encoding is successful, AWS_OP_ERR otherwise"]
    pub fn aws_huffman_encode(
        encoder: *mut aws_huffman_encoder,
        to_encode: *mut aws_byte_cursor,
        output: *mut aws_byte_buf,
    ) -> ::core::ffi::c_int;
    #[doc = " Decodes a byte buffer into the provided symbol array.\n\n \\param[in]       decoder         The decoder object to use\n \\param[in]       to_decode       The encoded byte buffer to read from\n \\param[in]       output          The buffer to write decoded symbols to.\n                                  If decoder is set to allow growth, capacity will be increased when necessary.\n\n \\return AWS_OP_SUCCESS if encoding is successful, AWS_OP_ERR otherwise"]
    pub fn aws_huffman_decode(
        decoder: *mut aws_huffman_decoder,
        to_decode: *mut aws_byte_cursor,
        output: *mut aws_byte_buf,
    ) -> ::core::ffi::c_int;
    #[doc = " Set whether or not to increase capacity when the output buffer fills up while decoding.\n This is false by default."]
    pub fn aws_huffman_decoder_allow_growth(decoder: *mut aws_huffman_decoder, allow_growth: bool);
}
